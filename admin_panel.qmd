---
title: "Admin panel"
---

::: {style="text-align: center;"}
[**This page is meant for SBDM organizers
only.**]{style="text-align: center;"}
:::

```{=html}
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script type="module">
  import { initializeApp } from "https://www.gstatic.com/firebasejs/11.4.0/firebase-app.js";
  import { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged, sendEmailVerification } from "https://www.gstatic.com/firebasejs/11.4.0/firebase-auth.js";

  const firebaseConfig = {
    apiKey: "AIzaSyCH3avPPXfXI49GTopvaFbeKrPtu8ufa2c",
    authDomain: "sbdm2025.firebaseapp.com",
    projectId: "sbdm2025",
    storageBucket: "sbdm2025.firebasestorage.app",
    messagingSenderId: "846447691095",
    appId: "1:846447691095:web:e41322d89f69949469ea12",
    measurementId: "G-G79REFBJ4H"
  };

  const app = initializeApp(firebaseConfig);
  const auth = getAuth(app);
  let hashedPassword

    document.getElementById("login-form").addEventListener("submit", async (event) => {
        event.preventDefault(); // Prevent form submission

    const email = document.getElementById("email").value.trim();
    const password = document.getElementById("password").value.trim();
    if (!email || !password) {
        alert("Please enter both email and password.");
        return;
    }
    hashedPassword = await hashPassword(password);
    try {
      const userCredential = await signInWithEmailAndPassword(auth, email, password);
    } catch (error) {
      alert(error.message);
    }
  });

    async function hashPassword(password) {
        const encoder = new TextEncoder();
        const data = encoder.encode(password);
        const hashBuffer = await crypto.subtle.digest("SHA-256", data);
        return Array.from(new Uint8Array(hashBuffer))
            .map(byte => byte.toString(16).padStart(2, "0"))
            .join("");
    }

  document.getElementById("logout-btn").addEventListener("click", async () => {
    await signOut(auth);
  });

    function getCookie(name) {
        let cookies = document.cookie.split('; ');
        for (let cookie of cookies) {
            let [key, value] = cookie.split('=');
            if (key === name) {
                return value;
            }
        }
        return "nothing"; // Cookie not found
    }

  onAuthStateChanged(auth, (user) => {
    console.log(hashedPassword)
    if (hashedPassword){
        document.cookie = `sbdmH=${hashedPassword}; path=/`;
    } else {
        const readCookie=getCookie("sbdmH")
        if (readCookie!=="nothing"){
            hashedPassword = readCookie;
        }
    }
    
    if (user && (user.email=='sbdm2025.lyon@gmail.com') && hashedPassword) {
      document.getElementById("auth-container").style.display = "none";
      document.getElementById("user-container").style.display = "block";
      document.getElementById("logged-container").style.display = "block";
      fetchAllData(hashedPassword)
    } else {
      document.getElementById("logged-container").style.display = "none";
      document.getElementById("auth-container").style.display = "block";
      document.getElementById("user-container").style.display = "none";
    }
  });

function showAbstract(title, abstract, session, authors, presenter) {
    document.getElementById('modalTitle').textContent = decodeURIComponent(title);
    document.getElementById('modalSession').textContent = decodeURIComponent(session);
    document.getElementById('modalPresenter').textContent = decodeURIComponent(presenter);
    document.getElementById('modalAuthors').textContent = decodeURIComponent(authors);
    document.getElementById('modalAbstract').textContent = decodeURIComponent(abstract);

    let modal = new bootstrap.Modal(document.getElementById('abstractModal'));
    modal.show();
}
    
async function fetchAllData(hashedPassword) {
    const user = auth.currentUser;
    const response = await fetch(`https://misc.robustcircuit.eu/all/${hashedPassword}`);
    const result = await response.json();
    let tableBody = "";
    result.forEach(entry => {
        tableBody += `
            <tr data-id="${entry._id}">
                <td contenteditable="true" data-field="name">${entry.name}</td>
                <td contenteditable="true" data-field="email">${entry.email}</td>
                <td contenteditable="true" class="editable" data-field="affiliation">${entry.affiliation}</td>
                <td contenteditable="true" data-field="foodrestriction">${entry.foodrestriction}</td>
                <td contenteditable="true" class="editable" data-field="position">${entry.position}</td>
                <td>
                    <select class="form-select editable" data-field="presents">
                        <option value="true" ${entry.presents ? "selected" : ""}>Yes</option>
                        <option value="false" ${!entry.presents ? "selected" : ""}>No</option>
                    </select>
                </td>
                <td>
                    <select class="form-select editable" data-field="discountRequest">
                        <option value="true" ${entry.discountRequest ? "selected" : ""}>Yes</option>
                        <option value="false" ${!entry.discountRequest ? "selected" : ""}>No</option>
                    </select>
                </td>
                <td>
                    <button class="btn btn-primary btn-sm show-abstract-btn"
                        data-title="${encodeURIComponent(entry.title || "")}"
                        data-abstract="${encodeURIComponent(entry.abstract || "")}"
                        data-session="${encodeURIComponent(entry.session || "")}"
                        data-authors="${encodeURIComponent(entry.authors || "")}"
                        data-presenter="${encodeURIComponent(entry.presenter || "")}">View</button>
                </td>
                <td>
                    <select class="form-select editable" data-field="paid">
                        <option value="true" ${entry.paid ? "selected" : ""}>Yes</option>
                        <option value="false" ${!entry.paid ? "selected" : ""}>No</option>
                    </select>
                </td>
            </tr>`;
    });
    $("#tableBody").html(tableBody);

    // Attach event listeners to the buttons
    $(".show-abstract-btn").on("click", function() {
        showAbstract(
            $(this).data("title"),
            $(this).data("abstract"),
            $(this).data("session"),
            $(this).data("authors"),
            $(this).data("presenter")
        );
    });
}
    // Inline edit event
    $(document).on("blur", ".editable", function () {
        let row = $(this).closest("tr");
        let id = row.data("id");
        let field = $(this).data("field");
        let value = $(this).hasClass("form-select") ? $(this).val() : $(this).text().trim();

        updateEntry(id, field, value);
    });

    // Search functionality
    $("#search").on("keyup", function () {
        let value = $(this).val().toLowerCase();
        $("#tableBody tr").filter(function () {
            $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
        });
    });

    function updateEntry(id, field, value, password) {
        const user = auth.currentUser;
        $.ajax({
            url: `https://misc.robustcircuit.eu/edit/${hashedPassword}/${id}`,
            type: "PUT",
            contentType: "application/json",
            data: JSON.stringify({ [field]: value }),
            success: function (response) {
                console.log("Update successful", response);
            },
            error: function (error) {
                console.error("Update failed", error);
            }
        });
    }

  
</script>
```

```{=html}
<style>

    .auth-container, .user-container {
        background-color: #fff;
        padding: 10px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        width: 100%;
        text-align: center;
        margin: 10px;
    }

    input[type="email"], input[type="password"] {
        padding: 10px;
        margin: 8px 0;
        border: 1px solid #ddd;
        border-radius: 4px;
        box-sizing: border-box;
    }

    button {
        background-color: #007bff;
        color: white;
        padding: 10px 15px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        width: 100%;
        margin-top: 10px;
    }

    button:hover {
        background-color: #0056b3;
    }

    .user-container {
        display: none; /* Hidden by default */
    }

    .form-check-label{
      margin-left: 10px;
    }

</style>
```

```{=html}
<div class="container-lg">
    <div class="logged-container row justify-content-center" id="logged-container">
        <div class="col-md-5">
            <div class="d-flex justify-content-between align-items-center">
                <h5 id="user-email" class="mb-0">Logged as administrator</h5>
                <button id="logout-btn" class="btn btn-primary" style="max-width:15%">Logout</button>
            </div>
        </div>
    </div>
    <div class="d-flex row justify-content-center flex-wrap" style="width:100%">
        <div style="width:45%">
            <div class="auth-container text-center" id="auth-container">
                <h2 style="margin-top:0px">Admin login</h2>
                <form id="login-form">
                <input type="email" id="email" class="form-control" name="username" placeholder="Email" autocomplete="username">
                <input type="password" id="password" class="form-control" name="password" placeholder="Password" autocomplete="current-password">
                <button type="submit" id="login-btn" class="btn btn-primary mt-2 w-75">Login</button>
                </form>
            </div>
        </div>
    <div class="container mt-4" id="user-container">
        <h2 class="mb-3">Registrations</h2>
        <input type="text" id="search" class="form-control mb-3" placeholder="Search...">
        <table class="table table-bordered table-striped">
    <thead>
        <tr>
            <th>Name</th>
            <th>Email</th>
            <th>Affiliation</th>
            <th>Food</th>
            <th>Position</th>
            <th>Presents</th>
            <th>Discount</th>
            <th>Abstract</th>
            <th>Paid</th>
        </tr>
    </thead>
    <tbody id="tableBody">
        <!-- Data will be inserted here dynamically -->
    </tbody>
</table>
    </div>

    <!-- Abstract Modal -->
    <div class="modal fade" id="abstractModal" tabindex="-1" aria-labelledby="modalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg"> <!-- Enlarged modal for better readability -->
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalLabel">Presentation Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <h4 id="modalTitle" class="fw-bold"></h4>
                    <p><strong>Session:</strong> <span id="modalSession"></span></p>
                    <p><strong>Presenter:</strong> <span id="modalPresenter"></span></p>
                    <p><strong>Authors:</strong> <span id="modalAuthors"></span></p>
                    <hr>
                    <h5>Abstract</h5>
                    <p id="modalAbstract" class="text-justify"></p>
                </div>
            </div>
        </div>
    </div>
</div>

```