---
title: "Admin panel"
---




```{=html}
<script type="module">
  import { initializeApp } from "https://www.gstatic.com/firebasejs/11.4.0/firebase-app.js";
  import { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged, sendEmailVerification } from "https://www.gstatic.com/firebasejs/11.4.0/firebase-auth.js";

  const firebaseConfig = {
    apiKey: "AIzaSyCH3avPPXfXI49GTopvaFbeKrPtu8ufa2c",
    authDomain: "sbdm2025.firebaseapp.com",
    projectId: "sbdm2025",
    storageBucket: "sbdm2025.firebasestorage.app",
    messagingSenderId: "846447691095",
    appId: "1:846447691095:web:e41322d89f69949469ea12",
    measurementId: "G-G79REFBJ4H"
  };

  const app = initializeApp(firebaseConfig);
  const auth = getAuth(app);

  document.getElementById("login-btn").addEventListener("click", async () => {
    const email = document.getElementById("email").value;
    const password = document.getElementById("password").value;
    try {
      const userCredential = await signInWithEmailAndPassword(auth, email, password);
      if (!userCredential.user.emailVerified) {
        alert("Please verify your email address before logging in.");
        await signOut(auth);
        return;
      }
    } catch (error) {
      alert(error.message);
    }
  });

    async function hashPassword(password) {
        const encoder = new TextEncoder();
        const data = encoder.encode(password);
        const hashBuffer = await crypto.subtle.digest("SHA-256", data);
        return Array.from(new Uint8Array(hashBuffer))
            .map(byte => byte.toString(16).padStart(2, "0"))
            .join("");
    }

  document.getElementById("signup-btn").addEventListener("click", async () => {
    const email = document.getElementById("signup-email").value;
    const password = document.getElementById("signup-password").value;
    try {
      const userCredential = await createUserWithEmailAndPassword(auth, email, password);
      await sendEmailVerification(userCredential.user);
      alert("Verification email sent. Please check your inbox.");
    } catch (error) {
      alert(error.message);
    }
  });

  document.getElementById("logout-btn").addEventListener("click", async () => {
    await signOut(auth);
  });


  async function fetchUserData(email) {
    try {
      const response = await fetch(`https://misc.robustcircuit.eu/user/${email}`);
      const result = await response.json();
      console.log(result.data)
      if (result.success) {
        document.getElementById("formName").value = result.data.name;
        document.getElementById("formEmail").value = email;
        document.getElementById("formAffiliation").value = result.data.affiliation;
        document.getElementById("formAbstract").value = result.data.abstract;
        // Prepopulate the radio button based on formSession
        const sessionValue = result.data.session; // Assuming this matches the radio values
        const radioButton = document.querySelector(`input[name="formSession"][value="${sessionValue}"]`);
        if (radioButton) {
            radioButton.checked = true;
        }
      }
    } catch (error) {
      console.error("Error fetching user data:", error);
    }

  }

  onAuthStateChanged(auth, (user) => {
    if (user && user.emailVerified && (user.email=='sbdm2025.lyon@gmail.com')) {
      fetchAllData(user.password)
    }
  });

// Fetch data from backend API
    async function fetchAllData() {
        const user = auth.currentUser;
        const hashedPassword = await hashPassword(user.password);
        const response = await fetch(`https://misc.robustcircuit.eu/all?hash=${hashedPassword}`);
        const result = await response.json();
        let tableBody = "";
        data.forEach(entry => {
            tableBody += `
                <tr data-id="${entry._id}">
                    <td contenteditable="true" class="editable" data-field="name">${entry.name}</td>
                    <td contenteditable="true" class="editable" data-field="email">${entry.email}</td>
                    <td contenteditable="true" class="editable" data-field="title">${entry.title}</td>
                    <td contenteditable="true" class="editable" data-field="affiliation">${entry.affiliation}</td>
                    <td contenteditable="true" class="editable" data-field="session">${entry.session}</td>
                    <td contenteditable="true" class="editable" data-field="foodrestriction">${entry.foodrestriction}</td>
                    <td>
                        <select class="form-select editable" data-field="paid">
                            <option value="true" ${entry.paid ? "selected" : ""}>Yes</option>
                            <option value="false" ${!entry.paid ? "selected" : ""}>No</option>
                        </select>
                    </td>
                    <td><button class="btn btn-primary btn-sm" onclick="showAbstract('${entry.abstract.replace(/'/g, "&apos;")}')">View</button></td>
                </tr>`;
        });
        $("#tableBody").html(tableBody);
    };

    function showAbstract(abstract) {
        $("#modalBody").text(abstract);
        $("#abstractModal").modal("show");
    }

    // Inline edit event
    $(document).on("blur", ".editable", function () {
        let row = $(this).closest("tr");
        let id = row.data("id");
        let field = $(this).data("field");
        let value = $(this).hasClass("form-select") ? $(this).val() : $(this).text().trim();

        updateEntry(id, field, value);
    });

    // Search functionality
    $("#search").on("keyup", function () {
        let value = $(this).val().toLowerCase();
        $("#tableBody tr").filter(function () {
            $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
        });
    });

    function updateEntry(id, field, value, password) {
        const user = auth.currentUser;
        const hashedPassword = await hashPassword(user.password);
        $.ajax({
            url: `https://misc.robustcircuit.eu/edit?hash=${hashedPassword}&id=${id}`,
            type: "PUT",
            contentType: "application/json",
            data: JSON.stringify({ [field]: value }),
            success: function (response) {
                console.log("Update successful", response);
            },
            error: function (error) {
                console.error("Update failed", error);
            }
        });
    }

  document.getElementById("registrationForm").addEventListener("submit", async function(event) {
    event.preventDefault();
    const user = auth.currentUser;
    if (!user || !user.emailVerified) return;
    const formData = {
      name: document.getElementById("name").value,
      email: user.email,
      message: document.getElementById("message").value
    };
    try {
      const response = await fetch("https://misc.robustcircuit.eu/submit-form", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(formData)
      });
      const result = await response.json();
      document.getElementById("responseMessage").innerText = result.message;
    } catch (error) {
      document.getElementById("responseMessage").innerText = "Error submitting the form.";
    }
  });
  
</script>

```

:::
```{=html}
    <div class="container mt-4">
        <div class="col-md-5">
            <div class="auth-container text-center">
                <h2>Login</h2>
                <input type="email" id="email" class="form-control" placeholder="Email">
                <input type="password" id="password" class="form-control" placeholder="Password">
                <button id="login-btn" class="btn btn-primary mt-2">Login</button>
                <button id="logout-btn" class="btn btn-secondary mt-2">Logout</button>
            </div>
        </div>
        <h2 class="mb-3">Form Data Entries</h2>
        <input type="text" id="search" class="form-control mb-3" placeholder="Search...">
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Title</th>
                    <th>Affiliation</th>
                    <th>Session</th>
                    <th>Food Restriction</th>
                    <th>Paid</th>
                    <th>Abstract</th>
                </tr>
            </thead>
            <tbody id="tableBody">
                <!-- Data will be inserted here dynamically -->
            </tbody>
        </table>
    </div>

    <!-- Abstract Modal -->
    <div class="modal fade" id="abstractModal" tabindex="-1" aria-labelledby="modalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalLabel">Abstract</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="modalBody">
                    <!-- Abstract content will be injected here -->
                </div>
            </div>
        </div>
    </div>

```
:::